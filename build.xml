<?xml version="1.0" encoding="utf-8" ?>
<project name="apt" default="javac.tests" basedir=".">
	<path id="project.class.path">
		<pathelement location="lib/commons-io-2.4/commons-io-2.4.jar" />
		<pathelement location="lib/commons-collections4-4.0/commons-collections4-4.0.jar" />
		<pathelement location="lib/antlr-4.5.1/antlr-4.5.1-complete.jar" />
		<pathelement location="lib/sat4j-2.3.2/org.sat4j.core.jar"/>
		<pathelement location="lib/smtinterpol-2.1-219-g60cc1b6/smtinterpol.jar"/>
		<pathelement location="classes/apt" />
		<pathelement location="classes/compiler" />
		<pathelement location="classes/glue" />
	</path>

	<path id="test.class.path">
		<pathelement location="lib/mockito-1.9.5-rc1/mockito-core-1.9.5-rc1.jar" />
		<pathelement location="lib/objenesis-1.2/objenesis-1.2.jar" />
		<pathelement location="lib/testng-6.9.9/testng-6.9.9.jar" />
		<pathelement location="lib/testng-6.9.9/jcommander-1.48.jar" />
		<pathelement location="lib/hamcrest-1.3/hamcrest-core-1.3.jar" />
		<pathelement location="lib/hamcrest-1.3/hamcrest-library-1.3.jar" />
		<pathelement location="test-classes" />
	</path>

	<path id="ant.class.path">
		<pathelement location="lib/asm-4.1/asm-4.1.jar" />
		<pathelement location="classes/ant" />
	</path>

	<path id="glue.class.path">
		<pathelement location="classes/glue" />
	</path>

	<path id="compiler.class.path">
		<pathelement location="classes/glue" />
	</path>

	<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="test.class.path" />
	<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
		classpath="lib/checkstyle-6.1.1/checkstyle-6.1.1-all.jar" />

	<!-- Only run the antlr target if some .g file is newer than generated-src/antlr.stamp (which the antlr target touches) -->
	<target name="antlr.checkforchanges">
		<uptodate property="antlr.nochanges" targetfile="generated-src/antlr.stamp">
			<srcfiles dir="src/apt/uniol/apt/io/parser/" includes="**/*.g4"/>
		</uptodate>
	</target>

	<!-- Antlr4 is called here -->
	<target name="antlr" depends="antlr.checkforchanges" unless="antlr.nochanges">
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/RegexFormatLexer.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/RegexFormatParser.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/AptPNFormat.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/AptLTSFormat.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/SynetLTSFormat.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/SynetPNFormat.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/PetrifyLTSFormatLexer.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/PetrifyLTSFormatParser.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/PetrifyPNFormatLexer.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/PetrifyPNFormatParser.g4"/>
		</java>
		<java classpathref="project.class.path" classname="org.antlr.v4.Tool" fork="true" failonerror="true">
			<arg value="-o"/>
			<arg path="generated-src/apt/uniol/apt/io/parser/impl/"/>
			<arg value="-package"/>
			<arg value="uniol.apt.io.parser.impl"/>
			<arg line="${basedir}/src/apt/uniol/apt/io/parser/impl/LoLAPNFormat.g4"/>
		</java>
		<!-- Touch the time stamp file which antlr.checkforchanges checks for -->
		<touch file="generated-src/antlr.stamp" mkdirs="true"/>
	</target>

	<target name="javac" description="Compile java source to bytecode" depends="antlr,javac.glue,javac.compiler">
		<mkdir dir="classes/apt"/>
		<depend srcdir="src/apt:generated-src/apt" destdir="classes/apt" classpath="classes/glue" />
		<javac includes="**" encoding="utf-8"
				destdir="classes/apt" source="1.7" target="1.7"
				debug="true" debuglevel="lines,vars,source"
				includeantruntime="false">
			<src path="src/apt" />
			<src path="generated-src/apt" />
			<classpath refid="project.class.path"/>
			<compilerarg value="-Xlint:all"/>
		</javac>
		<copy todir="classes/apt">
			<fileset dir="src/apt">
				<include name="**/*.stg" />
			</fileset>
		</copy>
	</target>

	<target name="javac.glue" description="Compile java source to bytecode">
		<mkdir dir="classes/glue"/>
		<depend srcdir="src/glue" destdir="classes/glue" />
		<javac srcdir="src/glue" includes="**" encoding="utf-8"
				destdir="classes/glue" source="1.7" target="1.7"
				debug="true" debuglevel="lines,vars,source"
				includeantruntime="false">
			<classpath refid="glue.class.path"/>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<target name="javac.ant" depends="javac" description="Compile ant task">
		<mkdir dir="classes/ant"/>
		<depend srcdir="src/ant" destdir="classes/ant" classpath="classes/apt" />
		<javac srcdir="src/ant" includes="**" encoding="utf-8"
				destdir="classes/ant" source="1.7" target="1.7"
				debug="true" debuglevel="lines,vars,source"
				includeantruntime="true">
			<classpath>
				<path refid="project.class.path" />
				<path refid="ant.class.path" />
			</classpath>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<target name="javac.compiler" description="Compile annotation processors" depends="javac.glue">
		<mkdir dir="classes/compiler"/>
		<depend srcdir="src/compiler" destdir="classes/compiler" />
		<javac includes="**" encoding="utf-8"
				destdir="classes/compiler" source="1.7" target="1.7"
				debug="true" debuglevel="lines,vars,source"
				includeantruntime="false">
			<src path="src/compiler" />
			<classpath>
				<path refid="compiler.class.path" />
				<path refid="project.class.path" />
			</classpath>
			<compilerarg value="-Xlint:all"/>
			<compilerarg value="-proc:none"/>
		</javac>
		<copy todir="classes/compiler">
			<fileset dir="src/compiler">
				<include name="META-INF/**" />
			</fileset>
		</copy>
	</target>

	<target name="javac.tests" depends="javac" description="Compile test code">
		<mkdir dir="test-classes"/>
		<depend srcdir="test" destdir="test-classes" classpath="classes/apt" />
		<javac srcdir="test" includes="**" encoding="utf-8"
				destdir="test-classes" source="1.7" target="1.7"
				debug="true" debuglevel="lines,vars,source"
				includeantruntime="false">
			<classpath>
				<path refid="test.class.path" />
				<path refid="project.class.path" />
			</classpath>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<target name="verify-parsers" depends="javac.ant" description="Verify all of the net collection is parsable.">
		<taskdef name="parsers-verify" classname="uniol.apt.tasks.ParsableTask">
			<classpath>
				<path refid="project.class.path" />
				<path refid="ant.class.path" />
			</classpath>
		</taskdef>

		<parsers-verify outputdir="reports/parsers">
			<fileset dir="nets" >
				<include name="**/*" />
			</fileset>
			<exclude dir="nets" >
				<include name="**/*.pdf" />
				<include name="**/*.png" />
				<include name="**/*.dot" />
				<include name="not-parsable-test-nets/**" />
			</exclude>
		</parsers-verify>
	</target>

	<target name="verify-modules" depends="javac.ant" description="Verify the use of parameters in modules.">
		<taskdef name="module-verify" classname="uniol.apt.tasks.ModuleParameterVerifyTask">
			<classpath>
				<path refid="project.class.path" />
				<path refid="ant.class.path" />
			</classpath>
		</taskdef>

		<module-verify>
			<fileset dir="classes/apt" >
				<include name="**/*Module.class" />
			</fileset>
		</module-verify>
	</target>

	<target name="xml.tests" depends="javac.ant">
		<taskdef name="xml-tests" classname="uniol.apt.tasks.WriteTestsXML">
			<classpath>
				<path refid="project.class.path" />
				<path refid="ant.class.path" />
			</classpath>
		</taskdef>

		<xml-tests output="testng.xml">
			<classfileset dir="test-classes" >
				<include name="**/*Test.class" />
			</classfileset>
		</xml-tests>
	</target>

	<target name="test" depends="javac.tests,xml.tests" description="Run tests">
		<testng outputdir="reports/testng" verbose="2" haltonfailure="true">
			<!-- enable assertions -->
			<jvmarg value="-ea" />
			<classpath>
				<path refid="test.class.path" />
				<path refid="project.class.path" />
			</classpath>
			<xmlfileset file="testng.xml" />
		</testng>
	</target>

	<target name="test-class" depends="javac.tests"
		description="run a specific test class. Requires class.name property set to fully qualified name of test class">
		<condition property="propsSpecified">
			<and>
				<isset property="class.name" />
			</and>
		</condition>
		<tstamp />
		<fail unless="propsSpecified"
			message="class.name property not specified; try calling ant with -Dclass.name=uniol.apt...."/>
		<copy file="testng.single-class.xml" tofile="testng.xml" overwrite="true">
			<filterset>
				<filter token="CLASS" value="${class.name}"/>
			</filterset>
		</copy>
		<testng outputDir="reports/testng-single-class-${class.name}" verbose="2">
			<!-- enable assertions -->
			<jvmarg value="-ea" />
			<classpath>
				<path refid="test.class.path" />
				<path refid="project.class.path" />
			</classpath>
			<xmlfileset file="testng.xml" />
		</testng>
	</target>

	<target name="test-method" depends="javac.tests"
		description="run a specific test method. Requires class.name property set to fully qualified name of test class and test.name property set to method name">
		<condition property="propsSpecified">
			<and>
				<isset property="class.name" />
				<isset property="test.name" />
			</and>
		</condition>
		<tstamp />
		<fail unless="propsSpecified"
			message="class.name and/or test.name property not specified; try calling ant with -Dclass.name=uniol.apt... -Dtest.name=myTestMethod"/>
		<copy file="testng.single-method.xml" tofile="testng.xml" overwrite="true">
			<filterset>
				<filter token="CLASS" value="${class.name}"/>
				<filter token="TEST" value="${test.name}"/>
			</filterset>
		</copy>
		<testng outputDir="reports/testng-single-method-${class.name}-${test.name}" verbose="2">
			<!-- enable assertions -->
			<jvmarg value="-ea" />
			<classpath>
				<path refid="test.class.path" />
				<path refid="project.class.path" />
			</classpath>
			<xmlfileset file="testng.xml" />
		</testng>
	</target>

	<target name="javadoc" description="Generate documentation from java source">
		<mkdir dir="./doc/javadoc"/>
		<javadoc encoding="utf-8" destdir="./doc/javadoc"
				author="true" version="true" use="true"
				Encoding="UTF-8" charset="UTF-8"
				docencoding="UTF-8" access="private">
			<fileset dir="src/apt" includes="**/*.java"/>
			<fileset dir="src/compiler" includes="**/*.java"/>
			<fileset dir="src/glue" includes="**/*.java"/>
			<fileset dir="test" includes="**/*.java"/>
			<classpath>
				<path refid="test.class.path" />
				<path refid="project.class.path" />
			</classpath>
		</javadoc>
	</target>

	<target name="checkstyle" depends="javac.tests">
		<mkdir dir="reports" />
		<checkstyle config="checkstyle.xml" failOnViolation="false">
			<formatter type="xml" tofile="reports/checkstyle.xml"/>
			<formatter type="plain" tofile="reports/checkstyle.txt"/>
			<fileset dir="src/apt" includes="**/*"/>
			<fileset dir="src/compiler" includes="**/*"/>
			<fileset dir="src/glue" includes="**/*"/>
			<fileset dir="test" includes="**/*"/>
			<classpath>
				<path refid="test.class.path" />
				<path refid="project.class.path" />
			</classpath>
		</checkstyle>
	</target>

	<!-- Findbugs -->
	<!-- Set a sane default which can be overwritten via -Dfindbugs.home=... -->
	<property name="findbugs.home" location="/usr/share/findbugs"/>
	<available file="${findbugs.home}" type="dir" property="findbugs.present"/>

	<target name="findbugs" depends="findbugs.fail,findbugs.run" description="Run FindBugs on the source code"/>
	<target name="findbugs.fail" unless="findbugs.present">
		<fail message="FindBugs was not found. Try -Dfindbugs.home=/path/to/findbugs."/>
	</target>

	<target name="findbugs.run" depends="javac,javac.tests" if="findbugs.present">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
			classpath="${findbugs.home}/lib/findbugs-ant.jar" />
		<mkdir dir="reports" />
		<findbugs home="${findbugs.home}"
				output="xml:withMessages"
				outputFile="reports/findbugs.xml" >
			<auxClasspath>
				<path refid="test.class.path" />
				<path refid="project.class.path" />
			</auxClasspath>
			<sourcePath>
				<pathelement location="src/apt" />
				<pathelement location="test" />
			</sourcePath>
			<fileset dir="classes/apt">
				<include name="**/*.class" />
				<exclude name="uniol/apt/io/parser/impl/AptLTSFormat*.class" />
				<exclude name="uniol/apt/io/parser/impl/AptPNFormat*.class" />
				<exclude name="uniol/apt/io/parser/impl/RegexFormat*.class" />
				<exclude name="uniol/apt/io/parser/impl/SynetPNFormat*.class" />
				<exclude name="uniol/apt/io/parser/impl/SynetLTSFormat*.class" />
				<exclude name="uniol/apt/io/parser/impl/PetrifyPNFormat*.class" />
				<exclude name="uniol/apt/io/parser/impl/PetrifyLTSFormat*.class" />
			</fileset>
			<fileset dir="classes/compiler">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="classes/glue">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="test-classes">
				<include name="**/*.class" />
			</fileset>
		</findbugs>
	</target>

	<!-- JaCoCo -->
	<!-- Set a sane default which can be overwritten via -Djacoco.jar=... -->
	<property name="jacoco.jar" location="/usr/share/java/jacoco/org.jacoco.ant.jar"/>
	<available file="${jacoco.jar}" type="file" property="jacoco.present"/>

	<target name="jacoco" depends="jacoco.fail,jacoco.run" description="Run tests under JaCoCo"/>
	<target name="jacoco.fail" unless="jacoco.present">
		<fail message="JaCoCo was not found. Try -Djacoco.jar=/path/to/jacocoant.jar."/>
	</target>

	<target name="jacoco.run" depends="javac.tests,xml.tests" if="jacoco.present">
		<taskdef resource="org/jacoco/ant/antlib.xml" classpath="${jacoco.jar}"/>

		<delete file="reports/jacoco/jacoco.exec"/>
		<coverage destfile="reports/jacoco/jacoco.exec">
			<testng outputdir="reports/testng" verbose="1">
				<classpath>
					<path refid="test.class.path" />
					<path refid="project.class.path" />
				</classpath>
				<xmlfileset file="testng.xml" />
			</testng>
		</coverage>

		<report>
			<executiondata>
				<file file="reports/jacoco/jacoco.exec"/>
			</executiondata>

			<structure name="APT">
				<classfiles>
					<fileset dir="classes/apt/"/>
				</classfiles>
				<sourcefiles>
					<fileset dir="src/apt/"/>
				</sourcefiles>
			</structure>

			<html destdir="reports/jacoco/"/>
		</report>
	</target>

	<target name="clean" description="Cleans this project">
		<delete dir="classes" failonerror="false" />
		<delete dir="test-classes" failonerror="false" />
		<delete dir="reports" failonerror="false" />
		<delete dir="./doc/javadoc" failonerror="false" />
		<delete dir="generated-src" failonerror="false" />
		<delete file="apt.jar" failonerror="false" />
		<delete file="testng.xml" failonerror="false" />
	</target>

	<target name="jar" depends="verify-modules"
		description="Build a jar file containing all the needed stuff to run the apt tool.">
		<jar destfile="apt.jar">
			<fileset dir="classes/apt/" />
			<fileset dir="classes/glue/" />
			<zipfileset includes="**/*.class" src="lib/commons-io-2.4/commons-io-2.4.jar" />
			<zipfileset includes="**/*.class" src="lib/commons-collections4-4.0/commons-collections4-4.0.jar" />
			<zipfileset includes="**/*.class" src="lib/antlr-4.5.1/antlr-4.5.1-complete.jar" />
			<zipfileset includes="**/*.class" src="lib/sat4j-2.3.2/org.sat4j.core.jar" />
			<zipfileset includes="**/*.class" src="lib/smtinterpol-2.1-219-g60cc1b6/smtinterpol.jar"/>
			<manifest>
				<attribute name="Main-Class" value="uniol.apt.APT" />
			</manifest>
		</jar>
	</target>
	<import file="build.local.xml" optional="true"/>
</project>
